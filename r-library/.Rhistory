geom_point(data = periodicSim$events, mapping = aes(x=`Start date`, y=rates), colour="red")
p1 = ggplot()+
geom_line(data = periodicSim$ts, mapping = aes(x=date, y=Growth.actual), colour="red")+
geom_point(data = periodicSim$events, mapping = aes(x=`Start date`, y=rates), colour="red")
p2 = ggplot() +
geom_bar(data=periodicSim$ts, mapping=aes(x=date,y=import), stat="identity")+
geom_point(data = periodicSim$ts, mapping = aes(x=date, y=value), colour="black",size=0.3)+
geom_line(data=periodicSim$ts, mapping=aes(x=date,y=Est.actual), colour="red")
p1+p2+patchwork::plot_layout(ncol=1)
p1 = ggplot()+
geom_line(data = periodicSim$ts, mapping = aes(x=date, y=Growth.actual), colour="red")+
geom_point(data = periodicSim$events, mapping = aes(x=`Start date`, y=rates), colour="red")+
ylab("growth rate")
p2 = ggplot() +
geom_bar(data=periodicSim$ts, mapping=aes(x=date,y=import), stat="identity")+
geom_point(data = periodicSim$ts, mapping = aes(x=date, y=value), colour="black",size=0.3)+
geom_line(data=periodicSim$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
ylab("cases")
p1+p2+patchwork::plot_layout(ncol=1)
lagAnalysisDataset = jepidemic::periodicGrowthRate("lag test",smooth=FALSE) %>%
jepidemic::addImportations(rate = 1000) %>%
jepidemic::addPoissonRate()
lagAnalysisDataset$ts = lagAnalysisDataset$ts %>%
mutate(value = Est.actual)
usethis::use_data(lagAnalysisDataset,overwrite = TRUE)
p1 = ggplot()+
geom_line(data = lagAnalysisDataset$ts, mapping = aes(x=date, y=Growth.actual), colour="red")+
geom_point(data = lagAnalysisDataset$events, mapping = aes(x=`Start date`, y=rates), colour="red")+
ylab("growth rate")
p2 = ggplot() +
geom_bar(data=lagAnalysisDataset$ts, mapping=aes(x=date,y=import), stat="identity")+
geom_point(data = lagAnalysisDataset$ts, mapping = aes(x=date, y=value), colour="black",size=0.3)+
geom_line(data=lagAnalysisDataset$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
ylab("cases")
p1+p2+patchwork::plot_layout(ncol=1)
J$Serialiser$serialiseDataframe(lagAnalysisDataset$ts,here::here("../src/main/resources/lagAnalysisDataframe.ser"))
control = tibble(
smooth = c(TRUE,FALSE),
control = list(
tibble(
# SMOOTH
rates = c(0.03, -0.025, 0.005, 0.04, -0.04, -0.07),
breaks = c(0, 45, 96, 197, 254, 364)
),
tibble(
# STEP
rates = c(0.035, -0.03, 0.025, -0.015, 0.01, -0.005, 0),
breaks = c(0, 30, 130, 200, 250, 300, 364)
)
)
)
set.seed(101)
options = tibble(weekendEffect = c(0,0.03,0.1)) %>%
inner_join(control, by = character()) %>%
inner_join(tibble(seed = c(100,10000)), by=character()) %>%
mutate(
smoothLabel = ifelse(smooth,"spline","step") %>% ordered(levels=c("spline","step")),
weekendLabel = case_when(
weekendEffect == 0 ~ "no weekly variation",
weekendEffect == 0.03 ~ "\u00B1 3% variation",
weekendEffect == 0.1 ~ "\u00B1 10% variation",
) %>% ordered(levels=c("no weekly variation","\u00B1 3% variation","\u00B1 10% variation")),
seedLabel = case_when(
seed == 100 ~ "low incidence",
seed == 10000 ~ "high incidence"
) %>% ordered(levels=c("low incidence","high incidence")),
)
validationDataset = options %>% group_by_all() %>% group_modify(function(d,g,...) {
config = g
tmp = getGrowthRateBasedDataset(weekendEffect = config$weekendEffect, smooth= config$smooth, seed = config$seed,
breaks = config$control[[1]]$breaks, rates = c(0,config$control[[1]]$rates),
bootstraps=10)
tmp2 = tibble(
ts = list(tmp$ts),
events = list(tmp$events),
infectivityProfile = list(tmp$infectivityProfile)
)
return(tmp2)
})
View(validationDataset)
tmp = validationDataset %>% mutate(label = paste0(smoothLabel,"; ",seedLabel,"; ",weekendLabel))
tmp2 = tmp %>% ungroup() %>% select(label,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups) %>% mutate(row="simulation")
subgroups = c(1,2,3)
tmp2 = tmp %>% ungroup() %>% select(label,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups) %>% mutate(row="simulation")
tmp3 = tmp %>% ungroup() %>% select(model,label,estimate) %>% unnest(estimate) %>% filter(subgroup %in% subgroups)
p1 = incidencePlot(tmp2)+geom_line(aes(y=lambda_t),colour="red")+facet_grid(rows = vars(row), cols=vars(label))
incidencePlot(tmp2)+geom_line(aes(y=lambda_t),colour="red")+facet_grid(rows = vars(row), cols=vars(label))
incidencePlot(tmp2)+geom_line(aes(y=Est.value),colour="red")+facet_grid(rows = vars(row), cols=vars(label))
incidencePlot(tmp2)+geom_line(aes(y=Est.actual),colour="red")+facet_grid(rows = vars(row), cols=vars(label))
tmp = validationDataset$ts %>% mutate(rowLabel = paste0(smoothLabel,"; ",seedLabel), colLabel=paste0(weekendLabel))
tmp = validationDataset %>% mutate(rowLabel = paste0(smoothLabel,"; ",seedLabel), colLabel=paste0(weekendLabel))
tmp2 = tmp %>% ungroup() %>% select(rowLabel,colLabel,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups)
incidencePlot(tmp2)+geom_line(aes(y=Est.actual),colour="red")+facet_grid(rows = vars(rowLabel), cols=vars(colLabel))
?facet_grid
p1 = incidencePlot(tmp2)+geom_line(aes(y=Est.actual),colour="red")+facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_x")
incidencePlot(tmp2)+geom_line(aes(y=Est.actual),colour="red")+facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_x")
incidencePlot(tmp2)+geom_line(aes(y=Est.actual),colour="red")+facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_y")
incidencePlot
subgroups = c(1,2,3)
tmp = validationDataset %>% mutate(rowLabel = paste0(smoothLabel,"; ",seedLabel), colLabel=weekendLabel)
tmp2 = tmp %>% ungroup() %>% select(rowLabel,colLabel,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups)
ggplot(tmp2, aes(x=date,y=value,group=subgroup))+
geom_point(size=0.5)+
geom_line(alpha=0.1)+
ylab("cases")+
geom_line(aes(y=Est.actual),colour="red")+
facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_y")
ggplot(tmp2, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_y")
tmp3 = validationDataset %>% filter(subgroup==1, weekendEffect ==0, seed==100) %>% unnest(ts)
tmp3 = validationDataset %>% filter(weekendEffect ==0, seed==100) %>% unnest(ts) %>% filter(subgroup==1)
ggplot(tmp3, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_wrap(smoothLabel, scales = "free_y")
validationDataset %>% glimpse()
tmp3 = validationDataset %>% filter(weekendEffect==0, seed==100) %>% unnest(ts) %>% filter(subgroup==1)
glimpse(tmp3)
ggplot(tmp3, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_wrap(vars(smoothLabel), scales = "free_y")
ggplot(tmp3, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_wrap(vars(smoothLabel), scales = "free_y", ncol=1)
options(warn=2)
set.seed(101)
options = tibble(weekendEffect = c(0,0.03,0.1)) %>%
inner_join(control, by = character()) %>%
inner_join(tibble(seed = c(100,10000)), by=character()) %>%
mutate(
smoothLabel = ifelse(smooth,"spline","step") %>% ordered(levels=c("spline","step")),
weekendLabel = case_when(
weekendEffect == 0 ~ "no weekly variation",
weekendEffect == 0.03 ~ "\u00B1 3% variation",
weekendEffect == 0.1 ~ "\u00B1 10% variation",
) %>% ordered(levels=c("no weekly variation","\u00B1 3% variation","\u00B1 10% variation")),
seedLabel = case_when(
seed == 100 ~ "low incidence",
seed == 10000 ~ "high incidence"
) %>% ordered(levels=c("low incidence","high incidence")),
)
validationDataset = options %>% group_by_all() %>% group_modify(function(d,g,...) {
config = g
tmp = getGrowthRateBasedDataset(weekendEffect = config$weekendEffect, smooth= config$smooth, seed = config$seed,
breaks = config$control[[1]]$breaks, rates = c(0,config$control[[1]]$rates),
bootstraps=10)
tmp2 = tibble(
ts = list(tmp$ts),
events = list(tmp$events),
infectivityProfile = list(tmp$infectivityProfile)
)
return(tmp2)
})
?approx
subgroups = c(1,2,3)
tmp = validationDataset %>% mutate(rowLabel = paste0(smoothLabel,"; ",seedLabel), colLabel=weekendLabel)
tmp2 = tmp %>% ungroup() %>% select(rowLabel,colLabel,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups)
ggplot(tmp2, aes(x=date,y=value,group=subgroup))+
geom_point(size=0.5)+
geom_line(alpha=0.1)+
ylab("cases")+
geom_line(aes(y=Est.actual),colour="red")+
facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_y")
tmp3 = validationDataset %>% filter(weekendEffect==0, seed==100) %>% unnest(ts) %>% filter(subgroup==1)
ggplot(tmp3, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_wrap(vars(smoothLabel), scales = "free_y", ncol=1)
subgroups = c(1,2,3)
tmp = validationDataset %>% mutate(rowLabel = paste0(smoothLabel,"; ",seedLabel), colLabel=weekendLabel)
tmp2 = tmp %>% ungroup() %>% select(rowLabel,colLabel,ts) %>% distinct() %>% unnest(ts) %>% filter(subgroup %in% subgroups)
tmp3 = validationDataset %>% filter(weekendEffect==0, seed==100) %>% unnest(ts) %>% filter(subgroup==1)
ggplot(tmp3, aes(x=date,y=Growth.actual))+
geom_line(colour="red")+
facet_wrap(vars(smoothLabel), scales = "free_y", ncol=1)
ggplot(tmp2, aes(x=date,y=value,group=subgroup))+
geom_point(size=0.5)+
geom_line(alpha=0.1)+
ylab("cases")+
geom_line(aes(y=Est.actual),colour="red")+
facet_grid(rows = vars(rowLabel), cols=vars(colLabel), scales = "free_y")
lagAnalysisDataset = jepidemic::periodicGrowthRate("lag test",smooth=FALSE) %>%
jepidemic::addImportations(rate = 1000) %>%
jepidemic::addPoissonRate()
lagAnalysisDataset$ts = lagAnalysisDataset$ts %>%
mutate(value = Est.actual)
usethis::use_data(lagAnalysisDataset,overwrite = TRUE)
# J$Serialiser$serialiseDataframe(lagAnalysisDataset$ts,here::here("../src/main/resources/lagAnalysisDataframe.ser"))
p1 = ggplot()+
geom_line(data = lagAnalysisDataset$ts, mapping = aes(x=date, y=Growth.actual), colour="red")+
geom_point(data = lagAnalysisDataset$events, mapping = aes(x=`Start date`, y=rates), colour="red")+
ylab("growth rate")
p2 = ggplot() +
geom_bar(data=lagAnalysisDataset$ts, mapping=aes(x=date,y=import), stat="identity")+
geom_point(data = lagAnalysisDataset$ts, mapping = aes(x=date, y=value), colour="black",size=0.3)+
geom_line(data=lagAnalysisDataset$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
ylab("cases")
p1+p2+patchwork::plot_layout(ncol=1)
## Omicron scenario ----
sNegOmicronScenario = function(topLevel,weekendEffect) {
gr = generateGrowthRate(
name="sNeg cases", length = 100, breaks = c(30,40,50,70,85),
rates = c(0,topLevel,topLevel,topLevel/2,-0.05,0),sawtooth = TRUE,
smooth = FALSE,dateAtTime0 = as.Date("2021-10-15")
#TODO differential GT
)
gr = gr %>%
addImportations(tibble(time=1,import=25)) %>%
addPoissonRate() %>%
addObservedRate(weekendEffect = weekendEffect)
}
om = sNegOmicronScenario(topLevel = 0.35,weekendEffect = 0.05)
ggplot()+
geom_line(data = om$ts, mapping = aes(x=date, y=Growth.actual), colour="red")+
geom_point(data = om$events, mapping = aes(x=`Start date`, y=rates), colour="red")+
ylab("growth rate")
ggplot() +
geom_bar(data=om$ts, mapping=aes(x=date,y=import), stat="identity")+
geom_point(data = om$ts, mapping = aes(x=date, y=value), colour="black",size=0.3)+
geom_line(data=om$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
ylab("cases")
sPosOmicronScenario = function(weekendEffect) {
gr = generateGrowthRate(
name="sPos cases", length = 100, breaks = c(30,40),
rates = c(0,0,-0.02),sawtooth = TRUE,
smooth = FALSE,dateAtTime0 = as.Date("2021-10-15")
)
gr = gr %>%
addImportations(tibble(time=1,import=50000)) %>%
addPoissonRate() %>%
addObservedRate(weekendEffect = weekendEffect)
}
de = sPosOmicronScenario(weekendEffect = 0.05)
omicronDataset = jepidemic::getTwoAlternativesDataset(scenario1 = om,scenario2 = de, delayMean1 = 0.8, delayMean2 = 1, timepoints = c(35,45,55,65,100))
omicronDataset$ts %>% glimpse()
ggplot()+
geom_line(data = om$ts, mapping = aes(x=date, y=Growth.actual, colour=source))+
geom_line(data = de$ts, mapping = aes(x=date, y=Growth.actual.s2, colour=source))+
geom_point(data = om$events, mapping = aes(x=`Start date`, y=rates, colour=source))+
geom_point(data = de$events, mapping = aes(x=`Start date`, y=rates, colour=source))
ggplot()+
geom_line(data = om$ts, mapping = aes(x=date, y=Growth.actual, colour=source))+
geom_line(data = de$ts, mapping = aes(x=date, y=Growth.actual, colour=source))+
geom_point(data = om$events, mapping = aes(x=`Start date`, y=rates, colour=source))+
geom_point(data = de$events, mapping = aes(x=`Start date`, y=rates, colour=source))
ylab("growth rate")
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value, colour=as.factor(observationDate), group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))
omicronDataset$ts %>% glimpse()
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s1, colour=source, group=subgroup), size=0.1)+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s2, colour=source, group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s1, colour=source.s1, group=subgroup), size=0.1)+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s2, colour=source.s2, group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s1, colour=source.s1, group=subgroup), size=0.1)+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s2, colour=source.s2, group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))+scale_y_continuous(trans="log1p", breaks = c(0,1,10,100,1000,10000,1000000))
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s1, colour=source.s1, group=subgroup), size=0.1)+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s2, colour=source.s2, group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))+scale_y_continuous(trans="log1p", breaks = c(0,10,100,1000,10000,100000))
ggplot() +
#geom_bar(data=weekend$ts, mapping=aes(x=date,y=import), stat="identity")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.actual), colour="red")+
#geom_line(data=weekend$ts, mapping=aes(x=date,y=Est.observed), colour="blue")+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s1, colour=source.s1, group=subgroup), size=0.1)+
geom_point(data=omicronDataset$ts, mapping=aes(x=date,y=value.s2, colour=source.s2, group=subgroup), size=0.1)+
facet_wrap(vars(observationDate))+scale_y_continuous(trans="log1p", breaks = c(0,10,100,1000,10000,100000))+
ylab("cases")+xlab("date")
omicronDataset$ts %>% giimpse()
omicronDataset$ts %>% glimpse()
ggplot()+
geom_line(data = omicronDataset$ts, mapping = aes(x=date, y=Proportion.actual))+
#geom_point(data = omicronDataset$events, mapping = aes(x=`Start date`, y=rates, colour=source))+
ylab("proportion")
ggplot()+
geom_line(data = omicronDataset$ts, mapping = aes(x=date, y=Proportion.actual))+
#geom_point(data = omicronDataset$events, mapping = aes(x=`Start date`, y=rates, colour=source))+
ylab("proportion")+facet_wrap(vars(observationDate))
ggplot()+
geom_line(data = omicronDataset$ts, mapping = aes(x=date, y=Proportion.actual),colour="red")+
geom_point(data = omicronDataset$ts, mapping = aes(x=date, y=proportion),colour="black",size=0.2)+
ylab("proportion")+facet_wrap(vars(observationDate))
devtools::load_all()
rtRibbon
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
warning = FALSE,
message = FALSE,
error = TRUE
)
here::i_am("vignettes/cori-method-validation.Rmd")
source(here::here("vignettes/common-setup.R"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
warning = FALSE,
message = FALSE,
error = TRUE
)
here::i_am("vignettes/cori-method-validation.Rmd")
source(here::here("vignettes/common-setup.R"))
library(EpiEstim)
epiest = bind_rows(lapply(1:15, function(window) {
tau = window-1
tmp = EpiEstim::estimate_R(Flu2009$incidence,
config = make_config(method = "non_parametric_si",
si_distr = Flu2009$si_distr,
mean_prior=5, std_prior=4,
t_start=2:(32-tau),t_end=(2+tau):32))
return(tmp$R %>% mutate(Rt.StartDate = tmp$date[t_start],
Rt.EndDate = tmp$date[t_end],
Rt.Mean = `Mean(R)`,
Rt.Quantile.0.5 = `Median(R)`,
Rt.Quantile.0.025 = `Quantile.0.025(R)`,
Rt.Quantile.0.975 = `Quantile.0.975(R)`,
Rt.Window = window
))
}))
p1 = incidencePlot(Flu2009$incidence %>% mutate(date = dates, value = I, subgroup="none"))+xlab(NULL)
p2 = ggplot(tibble(y=Flu2009$si_distr) %>% mutate(x1=row_number()-1,x0=x1-1), aes(x=(x1+x0)/2,y=y))+geom_bar(stat="identity", width=0.9, colour="black",fill=NA)+scale_x_continuous(breaks=-1:14)+xlab("days since primary infection")+ylab("P(secondary infection on given day|secondary infection)")
p3 = rtPlot(epiest %>% filter(Rt.Window<=10),ylim = c(0,5))+facet_wrap(vars(Rt.Window),ncol=5)+standardPrintOutput::narrowAndTall()+xlab(NULL)
design = "
111122
333322
333322
"
p4 = p1+p2+p3+plot_annotation(tag_levels = "A")+plot_layout(design = design)
p4 %>% saveHalfPageFigure(output("epiEstimFlu2009"))
# <!-- ```{r} -->
J = jepidemic::JavaApi$new()
estim = J$CoriEstimator$new(r0Mean = 5,r0SD = 4,maxWindow = 14)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
warning = FALSE,
message = FALSE,
error = TRUE
)
here::i_am("vignettes/cori-method-validation.Rmd")
source(here::here("vignettes/common-setup.R"))
library(EpiEstim)
epiest = bind_rows(lapply(1:15, function(window) {
tau = window-1
tmp = EpiEstim::estimate_R(Flu2009$incidence,
config = make_config(method = "non_parametric_si",
si_distr = Flu2009$si_distr,
mean_prior=5, std_prior=4,
t_start=2:(32-tau),t_end=(2+tau):32))
return(tmp$R %>% mutate(Rt.StartDate = tmp$date[t_start],
Rt.EndDate = tmp$date[t_end],
Rt.Mean = `Mean(R)`,
Rt.Quantile.0.5 = `Median(R)`,
Rt.Quantile.0.025 = `Quantile.0.025(R)`,
Rt.Quantile.0.975 = `Quantile.0.975(R)`,
Rt.Window = window
))
}))
p1 = incidencePlot(Flu2009$incidence %>% mutate(date = dates, value = I, subgroup="none"))+xlab(NULL)
p2 = ggplot(tibble(y=Flu2009$si_distr) %>% mutate(x1=row_number()-1,x0=x1-1), aes(x=(x1+x0)/2,y=y))+geom_bar(stat="identity", width=0.9, colour="black",fill=NA)+scale_x_continuous(breaks=-1:14)+xlab("days since primary infection")+ylab("P(secondary infection on given day|secondary infection)")
p3 = rtPlot(epiest %>% filter(Rt.Window<=10),ylim = c(0,5))+facet_wrap(vars(Rt.Window),ncol=5)+standardPrintOutput::narrowAndTall()+xlab(NULL)
design = "
111122
333322
333322
"
p4 = p1+p2+p3+plot_annotation(tag_levels = "A")+plot_layout(design = design)
p4 %>% saveHalfPageFigure(output("epiEstimFlu2009"))
# <!-- ```{r} -->
J = jepidemic::JavaApi$new()
estim = J$CoriEstimator$new(r0Mean = 5,r0SD = 4,maxWindow = 14)
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
installed.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
rJava::.jinit()
Sys.setenv('JAVA_HOME' = '/usr/lib/jvm/java-9-oracle')
rJava::.jinit()
Sys.setenv('JAVA_HOME' = '/usr/lib/jvm/java-9-oracle/jre')
rJava::.jinit()
install.packages("rJava")
rJava::.jinit()
install.packages("rJava")
Sys.setenv('LD_LIBRARY_PATH' = '/usr/lib/jvm/java-9-oracle/lib/server')
rJava::.jinit()
rJava::.jinit()
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
warning = FALSE,
message = FALSE,
error = TRUE
)
here::i_am("vignettes/cori-method-validation.Rmd")
source(here::here("vignettes/common-setup.R"))
library(EpiEstim)
# <!-- ```{r} -->
J = jepidemic::JavaApi$new()
estim = J$CoriEstimator$new(r0Mean = 5,r0SD = 4,maxWindow = 14)
estim$withInfectivityProfile(infectivityProfile = Flu2009$si_distr, replace=FALSE)
# estim$detailedOutput() -->
estim$withDefaultPrior()
estim$atStartOfTimeseries()
# sudo R CMD javareconf JAVA_HOME=/usr/lib/jvm/java-9-oracle
# install.packages("rJava")
Sys.setenv('JAVA_HOME' = '/usr/lib/jvm/java-9-oracle/jre')
Sys.setenv('LD_LIBRARY_PATH' = '/usr/lib/jvm/java-9-oracle/lib/server')
rJava::.jinit()
rJava::.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
#
# <!-- jepidem = estim$estimateRtSingle(incidence = Flu2009$incidence,dateColName = "dates", incidenceColName = "I") -->
#
# <!-- comp = epiest %>% filter(is.finite(Rt.Mean)) %>% select(Rt.StartDate,Rt.EndDate,Rt.Window,Rt.Mean) %>% #,Rt.Quantile.0.5,Rt.Quantile.0.025,Rt.Quantile.0.975) %>% -->
# <!--   inner_join( -->
# <!--     jepidem %>% filter(is.finite(Rt.Mean)) %>% select(Rt.StartDate,Rt.EndDate,Rt.Window,Rt.Mean), #,Rt.Quantile.0.5,Rt.Quantile.0.025,Rt.Quantile.0.975), -->
# <!--     by=c("Rt.StartDate","Rt.EndDate","Rt.Window"), suffix=c(".epiest",".jepidem") -->
# <!-- ) -->
#
# <!-- mismatches = comp %>% mutate(matches = abs(Rt.Mean.epiest - Rt.Mean.jepidem)<0.000000000001) %>% filter(isFALSE(matches)); -->
#
# <!-- if (mismatches %>% nrow() != 0) { -->
# <!--   mismatches -->
# <!--   stop("mismatch between jepidemic and epiestim") -->
# <!-- } -->
# <!-- ``` -->
rtEstimator = function(window, estimator=estim) {
return(function(ts, infectivityProfile) {
estimator$withInfectivityProfileMatrix(infectivityProfile, replace = TRUE)
estimator$selectSpecificWindow(window)
estimator$estimateRt(ts %>% group_by(subgroup),dateColName = "date",incidenceColName = "value")
})
}
estimators = tibble(
model = forcats::as_factor(c(
"EpiEstim: 4 day",
"EpiEstim: 7 day",
"EpiEstim: 14 day"
)),
estimFn = c(
rtEstimator(4),
rtEstimator(7),
rtEstimator(14)
)
)
# stepTs = synthetic %>% filter(weekendEffect == 0 & smooth==TRUE & seed == 100) %>% pull(ts) %>% head(1) %>% `[[`(1)
# stepRt = estim$estimateRt(stepTs %>% group_by(subgroup),dateColName = "date",incidenceColName = "value")
#syntheticEstimates = synthetic %>% mutate(estimate = map2(.x = ts, .y=infectivityProfile., .f=generateEstimate, estim=estim))
# syntheticEstimates = synthetic %>% group_by(weekendEffect,smooth,control,seed,infectivityProfile) %>% group_modify(function(d,g,...) {
#   estim$withInfectivityProfile(g$infectivityProfile[[1]], replace = TRUE)
#   estim$selectSpecificWindow(14)
#   out = estim$estimateRt(d$ts[[1]] %>% group_by(subgroup),dateColName = "date",incidenceColName = "value")
#   return(tibble(model = "EpiEstim: 14 day", estimate = list(out), ts = d$ts))
# })
lagAnalysisResult = lagAnalysis(estimators)
debug(lagAnanlysis)
debug(lagAnalysis)
lagAnalysisResult = lagAnalysis(estimators)
triangular = tibble(name = triangularSim$name, ts = list(triangularSim$ts), infectivityProfile = triangularSim$infectivityProfile$yMatrix)
lagAnalysisResult = lagAnalysis(estimators)
triangular = tibble(name = triangularSim$name, ts = list(triangularSim$ts), infectivityProfile = list(triangularSim$infectivityProfile$yMatrix))
devtools::load_all()
lagAnalysisResult = lagAnalysis(estimators)
traceback()
